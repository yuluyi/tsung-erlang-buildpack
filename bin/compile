#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

bpdir=$(cd $(dirname $(dirname $0)); pwd)
mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
test -z ${build} && exit
cache=$(cd "$2/" && pwd)
test -z ${cache} && exit

# Start getting erlang

DEFAULT_OTP_VERSION="master"
if [ -f ${build}/.preferred_otp_version ]; then
    OTP_VERSION=$(cat ${build}/.preferred_otp_version)
fi
ver=${OTP_VERSION:=${DEFAULT_OTP_VERSION}}
tarball=${ver}.tgz
OTP_TARBALL_URL="https://s3.amazonaws.com/heroku-buildpack-erlang/${tarball}"
ERLROOT=${build}/otp
PROFILE=${build}/.profile.d

echo "-----> Using Erlang/OTP $ver"

(
    set -e

    # Already cached?
    test -f ${cache}/${tarball} && exit

    rm -rf ${cache}/* # be sure not to build up cruft
    cd ${cache}
    echo "-------> Fetching Erlang/OTP $ver"
    curl -sO ${OTP_TARBALL_URL} || exit 1
)

echo "-------> Unpacking Erlang/OTP $ver"
mkdir -p ${ERLROOT}
tar zxf ${cache}/${tarball} -C ${ERLROOT} --strip-components=2
echo "-------> Installing Erlang/OTP $ver"
ln -s ${ERLROOT} /app/otp
${ERLROOT}/Install -minimal /app/otp

PATH=/app/otp/bin:$PATH
export PATH


# Only needed erlang to build tsung. No need for rebar

# if [ ! -e "rebar" ]; then
#   echo "-----> Installing Rebar from buildpack"
#   cp ${bpdir}/opt/rebar ./
# fi
#
# echo "-----> Building with Rebar"
# unset GIT_DIR
# ./rebar get-deps compile 2>&1 | sed -u 's/^/       /'
# if [ ${PIPESTATUS[0]} -ne 0 ]; then
#   echo "-----> Build failed"
#   exit 1
# fi
#
# if [ -f ${bpdir}/opt/otp.sh ]; then
#   mkdir -p ${PROFILE}
#   cp ${bpdir}/opt/otp.sh ${PROFILE}
# fi
#
# echo "-----> Build succeeded"

# Finished getting erlang

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


TSUNG_ROOT=$build/tsung
mkdir ${TSUNG_ROOT}

# Download tsung

echo "-----> Downloading Tsung"
cd $cache

DEFAULT_TSUNG_VERSION="1.6.0"
if [ -f ${build}/.preferred_tsung_version ]; then
    TSUNG_VERSION=$(cat ${build}/.preferred_tsung_version)
fi
TSUNG_VER=${TSUNG_VERSION:=${DEFAULT_TSUNG_VERSION}}
TSUNG_TARBALL=tsung-${TSUNG_VER}.tar.gz

echo ${TSUNG_VER}

TSUNG_TARBALL_URL="http://tsung.erlang-projects.org/dist/${TSUNG_TARBALL}"

echo ${TSUNG_TARBALL_URL}

curl -sO ${TSUNG_TARBALL_URL} || exit 1

ls
echo ${TSUNG_TARBALL}

echo ${TSUNG_ROOT}

tar zxf ${TSUNG_TARBALL} -C ${TSUNG_ROOT} --strip-components=1

cd ${TSUNG_ROOT}

# configure
if [ -f configure ]; then
  echo "-----> Configuring"
  ./configure --prefix=${TSUNG_ROOT} 2>&1 | indent
fi

# make
echo "-----> Compiling with Make"
make 2>&1 | indent

echo "-----> Installing with make install"

make install 2>&1 | indent

ln -s ${TSUNG_ROOT} /app/tsung

PATH=/app/tsung/bin:$PATH
